---
description:
globs:
alwaysApply: false
---
# Lessons Learned

## Frontend Authorization
1. Prefer Backend Permission Enforcement
   - Rely on backend permission checks rather than frontend role checks
   - Simplifies frontend code and improves security
   - Reduces duplication of authorization logic
   - Makes the system more maintainable

2. Error Handling
   - Implement consistent 403 error handling across components
   - Show user-friendly error messages for unauthorized actions
   - Consider UX impact when deciding whether to hide UI elements or show them and handle 403s

3. State Management
   - Store complete user data from JWT without filtering
   - Avoid storing role-specific information in frontend state
   - Consider caching permissions if performance becomes an issue

## Best Practices
1. Authorization Strategy
   - Single source of truth for authorization (backend)
   - Clear separation of authentication and authorization
   - Consistent error handling patterns

2. Code Organization
   - Keep authorization logic simple in frontend
   - Use consistent patterns for API calls
   - Document authorization requirements clearly

3. Testing
   - Test both positive and negative permission scenarios
   - Verify error message display
   - Check edge cases in permission handling
