"""Implement PBAC models (Permission, Role, User roles relationship)

Revision ID: 05eadf8716a5
Revises: f1d4eec2dff2
Create Date: 2025-04-28 17:28:08.692228

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '05eadf8716a5'
down_revision = 'f1d4eec2dff2'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('permissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )

    # Define permissions table for bulk insert
    permissions_table = sa.sql.table('permissions',
        sa.sql.column('name', sa.String),
        sa.sql.column('description', sa.Text),
        sa.sql.column('created_at', sa.DateTime),
        sa.sql.column('updated_at', sa.DateTime)
    )
    from datetime import datetime
    now = datetime.utcnow()
    all_permissions = [
        {'name': 'CREATE_ORDER', 'description': 'Allows creating new fuel orders', 'created_at': now, 'updated_at': now},
        {'name': 'VIEW_ASSIGNED_ORDERS', 'description': 'Allows viewing orders assigned to self', 'created_at': now, 'updated_at': now},
        {'name': 'VIEW_ALL_ORDERS', 'description': 'Allows viewing all fuel orders', 'created_at': now, 'updated_at': now},
        {'name': 'UPDATE_OWN_ORDER_STATUS', 'description': 'Allows LST to update status of own orders', 'created_at': now, 'updated_at': now},
        {'name': 'COMPLETE_OWN_ORDER', 'description': 'Allows LST to complete own orders', 'created_at': now, 'updated_at': now},
        {'name': 'REVIEW_ORDERS', 'description': 'Allows CSR/Admin to mark orders as reviewed', 'created_at': now, 'updated_at': now},
        {'name': 'EXPORT_ORDERS_CSV', 'description': 'Allows exporting order data to CSV', 'created_at': now, 'updated_at': now},
        {'name': 'VIEW_ORDER_STATS', 'description': 'Allows viewing order statistics', 'created_at': now, 'updated_at': now},
        {'name': 'EDIT_FUEL_ORDER', 'description': 'Allows editing fuel order details (Admin?)', 'created_at': now, 'updated_at': now},
        {'name': 'DELETE_FUEL_ORDER', 'description': 'Allows deleting fuel orders (Admin?)', 'created_at': now, 'updated_at': now},
        {'name': 'VIEW_USERS', 'description': 'Allows viewing user list', 'created_at': now, 'updated_at': now},
        {'name': 'MANAGE_USERS', 'description': 'Allows creating, updating, deleting users and assigning roles', 'created_at': now, 'updated_at': now},
        {'name': 'VIEW_TRUCKS', 'description': 'Allows viewing fuel truck list', 'created_at': now, 'updated_at': now},
        {'name': 'MANAGE_TRUCKS', 'description': 'Allows creating, updating, deleting fuel trucks', 'created_at': now, 'updated_at': now},
        {'name': 'VIEW_AIRCRAFT', 'description': 'Allows viewing aircraft list', 'created_at': now, 'updated_at': now},
        {'name': 'MANAGE_AIRCRAFT', 'description': 'Allows creating, updating, deleting aircraft', 'created_at': now, 'updated_at': now},
        {'name': 'VIEW_CUSTOMERS', 'description': 'Allows viewing customer list', 'created_at': now, 'updated_at': now},
        {'name': 'MANAGE_CUSTOMERS', 'description': 'Allows creating, updating, deleting customers', 'created_at': now, 'updated_at': now},
        {'name': 'MANAGE_ROLES', 'description': 'Allows managing roles and their permissions', 'created_at': now, 'updated_at': now},
        {'name': 'VIEW_PERMISSIONS', 'description': 'Allows viewing available system permissions', 'created_at': now, 'updated_at': now},
        {'name': 'MANAGE_SETTINGS', 'description': 'Allows managing global application settings', 'created_at': now, 'updated_at': now},
    ]
    op.bulk_insert(permissions_table, all_permissions)

    with op.batch_alter_table('permissions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_permissions_name'), ['name'], unique=True)

    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_roles_name'), ['name'], unique=True)

    op.create_table('role_permissions',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('role_id', 'permission_id')
    )
    op.create_table('user_roles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    # Initialize session for data migration and seeding
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)
    permissions_table_id = sa.sql.table('permissions',
        sa.sql.column('id', sa.Integer),
        sa.sql.column('name', sa.String)
    )
    roles_table_id = sa.sql.table('roles',
        sa.sql.column('id', sa.Integer),
        sa.sql.column('name', sa.String)
    )
    # --- PBAC Step 6: Migrate existing users to new roles ---
    users_table = sa.sql.table('users',
        sa.sql.column('id', sa.Integer),
        sa.sql.column('role', sa.String)
    )
    user_roles_table = sa.sql.table('user_roles',
        sa.sql.column('user_id', sa.Integer),
        sa.sql.column('role_id', sa.Integer)
    )
    old_role_to_new_role_name = {
        'ADMIN': 'System Administrator',
        'CSR': 'Customer Service Representative',
        'LST': 'Line Service Technician'
    }
    # Fetch IDs of the NEW default roles
    role_results = session.execute(sa.select(roles_table_id.c.id, roles_table_id.c.name).where(roles_table_id.c.name.in_(old_role_to_new_role_name.values()))).fetchall()
    new_role_name_to_id_map = {name: id for id, name in role_results}
    # Fetch existing users and their OLD roles
    user_results = session.execute(sa.select(users_table.c.id, users_table.c.role)).fetchall()
    user_role_assignments = []
    for user_id, old_role_value in user_results:
        if old_role_value is None:
            continue
        new_role_name = old_role_to_new_role_name.get(str(old_role_value).upper())
        if new_role_name:
            new_role_id = new_role_name_to_id_map.get(new_role_name)
            if new_role_id:
                user_role_assignments.append({'user_id': user_id, 'role_id': new_role_id})
    if user_role_assignments:
        op.bulk_insert(user_roles_table, user_role_assignments)
    session.commit()
    # --- End PBAC Step 6 ---

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('role')

    # --- PBAC Step 5: Seed default roles and assign permissions ---
    roles_table = sa.sql.table('roles',
        sa.sql.column('id', sa.Integer),
        sa.sql.column('name', sa.String),
        sa.sql.column('description', sa.Text),
        sa.sql.column('created_at', sa.DateTime),
        sa.sql.column('updated_at', sa.DateTime)
    )
    role_permissions_table = sa.sql.table('role_permissions',
        sa.sql.column('role_id', sa.Integer),
        sa.sql.column('permission_id', sa.Integer)
    )
    # Default roles
    default_roles = [
        {'name': 'System Administrator', 'description': 'Full system access', 'created_at': now, 'updated_at': now},
        {'name': 'Customer Service Representative', 'description': 'Manages orders, customers, basic data', 'created_at': now, 'updated_at': now},
        {'name': 'Line Service Technician', 'description': 'Handles assigned fuel orders on the ramp', 'created_at': now, 'updated_at': now}
    ]
    op.bulk_insert(roles_table, default_roles)

    # Permission mapping for each role
    role_permission_mapping = {
        'System Administrator': [p['name'] for p in all_permissions],
        'Customer Service Representative': [
            'CREATE_ORDER', 'VIEW_ALL_ORDERS', 'REVIEW_ORDERS', 'EXPORT_ORDERS_CSV',
            'VIEW_ORDER_STATS', 'EDIT_FUEL_ORDER',
            'VIEW_USERS', 'VIEW_TRUCKS', 'VIEW_AIRCRAFT', 'VIEW_CUSTOMERS',
            'MANAGE_AIRCRAFT', 'MANAGE_CUSTOMERS',
            'VIEW_PERMISSIONS'
        ],
        'Line Service Technician': [
            'VIEW_ASSIGNED_ORDERS', 'UPDATE_OWN_ORDER_STATUS', 'COMPLETE_OWN_ORDER',
            'VIEW_ORDER_STATS'
        ]
    }
    # Fetch IDs for permissions and roles
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)
    perm_results = session.execute(sa.select(permissions_table_id.c.id, permissions_table_id.c.name)).fetchall()
    permission_map = {name: id for id, name in perm_results}
    role_results = session.execute(sa.select(roles_table_id.c.id, roles_table_id.c.name).where(roles_table_id.c.name.in_(role_permission_mapping.keys()))).fetchall()
    role_map = {name: id for id, name in role_results}
    role_permissions_data = []
    for role_name, permission_names in role_permission_mapping.items():
        role_id = role_map.get(role_name)
        if role_id:
            for perm_name in permission_names:
                permission_id = permission_map.get(perm_name)
                if permission_id:
                    role_permissions_data.append({'role_id': role_id, 'permission_id': permission_id})
    if role_permissions_data:
        op.bulk_insert(role_permissions_table, role_permissions_data)
    session.commit()
    # --- End PBAC Step 5 ---

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('role', postgresql.ENUM('LST', 'CSR', 'ADMIN', name='userrole'), autoincrement=False, nullable=False))

    # --- PBAC Step 6: Remove all user-role links ---
    op.execute('DELETE FROM user_roles')
    # --- End PBAC Step 6 ---

    op.drop_table('user_roles')
    op.drop_table('role_permissions')
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_roles_name'))

    op.drop_table('roles')
    with op.batch_alter_table('permissions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_permissions_name'))

    # Remove seeded permissions before dropping table
    permissions_table = sa.sql.table('permissions',
        sa.sql.column('name', sa.String)
    )
    permission_names = [
        'CREATE_ORDER',
        'VIEW_ASSIGNED_ORDERS',
        'VIEW_ALL_ORDERS',
        'UPDATE_OWN_ORDER_STATUS',
        'COMPLETE_OWN_ORDER',
        'REVIEW_ORDERS',
        'EXPORT_ORDERS_CSV',
        'VIEW_ORDER_STATS',
        'EDIT_FUEL_ORDER',
        'DELETE_FUEL_ORDER',
        'VIEW_USERS',
        'MANAGE_USERS',
        'VIEW_TRUCKS',
        'MANAGE_TRUCKS',
        'VIEW_AIRCRAFT',
        'MANAGE_AIRCRAFT',
        'VIEW_CUSTOMERS',
        'MANAGE_CUSTOMERS',
        'MANAGE_ROLES',
        'VIEW_PERMISSIONS',
        'MANAGE_SETTINGS',
    ]
    op.execute(
        permissions_table.delete().where(permissions_table.c.name.in_(permission_names))
    )

    op.drop_table('permissions')

    # --- PBAC Step 5: Remove seeded role-permissions and roles ---
    role_permissions_table = sa.sql.table('role_permissions',
        sa.sql.column('role_id', sa.Integer),
        sa.sql.column('permission_id', sa.Integer)
    )
    roles_table = sa.sql.table('roles',
        sa.sql.column('id', sa.Integer),
        sa.sql.column('name', sa.String)
    )
    # Remove role-permission links for default roles
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)
    default_role_names = [
        'System Administrator',
        'Customer Service Representative',
        'Line Service Technician'
    ]
    # Get role IDs for default roles
    role_results = session.execute(sa.select(roles_table.c.id, roles_table.c.name).where(roles_table.c.name.in_(default_role_names))).fetchall()
    role_ids = [id for id, name in role_results]
    if role_ids:
        op.execute(role_permissions_table.delete().where(role_permissions_table.c.role_id.in_(role_ids)))
    # Remove default roles
    op.execute(roles_table.delete().where(roles_table.c.name.in_(default_role_names)))
    session.commit()
    # --- End PBAC Step 5 ---

    # ### end Alembic commands ###
