---
description: 
globs: 
alwaysApply: false
---
# Lessons Learned

## SQLAlchemy Best Practices

### Many-to-Many Relationship Management
1. **Eager Loading**
   - Use `selectinload` for many-to-many relationships to prevent N+1 queries
   - Example from UserService:
   ```python
   User.query.options(db.selectinload(User.roles))
   ```
   - Prefer `selectinload` over `joinedload` for collections unless you need filtering

2. **Relationship Assignment**
   - Directly assign lists of model objects to relationship attributes
   - SQLAlchemy handles the association table updates automatically
   - Example:
   ```python
   user.roles = roles  # SQLAlchemy manages user_roles table inserts/deletes
   ```

3. **Input Validation**
   - Validate both format and content of relationship IDs
   - Check for list type and non-empty requirements
   - Verify all IDs exist before assignment
   - Example from UserService:
   ```python
   if not isinstance(role_ids, list):
       return None, "Invalid role_ids format, must be a list", 400
   roles = Role.query.filter(Role.id.in_(role_ids)).all()
   if len(roles) != len(set(role_ids)):
       found_ids = {role.id for role in roles}
       invalid_ids = set(role_ids) - found_ids
       return None, f"Invalid role IDs provided: {list(invalid_ids)}", 400
   ```

4. **Empty Relationship Handling**
   - Allow explicit clearing of relationships with empty lists
   - Validate business rules for required relationships
   - Example:
   ```python
   if not role_ids:  # Empty list check
       return None, "At least one role must be assigned", 400
   ```

## API Design Patterns

### Request/Response Structure
1. **Consistent Return Format**
   - Use tuple pattern: (result, message, status_code)
   - Return None for data on errors
   - Include descriptive error messages
   - Example:
   ```python
   return user, "User created successfully", 201
   return None, "Invalid role IDs provided", 400
   ```

2. **Input Validation Hierarchy**
   - Validate format before content
   - Check required fields first
   - Validate relationships after basic fields
   - Example order:
   ```python
   # 1. Required fields
   if not all(key in data for key in ['email', 'password', 'role_ids']):
       return None, "Missing required fields", 400
   # 2. Format validation
   if not isinstance(role_ids, list):
       return None, "Invalid format", 400
   # 3. Content validation
   if User.query.filter_by(email=data['email']).first():
       return None, "Email already registered", 409
   # 4. Relationship validation
   roles = Role.query.filter(Role.id.in_(role_ids)).all()
   ```

## Migration Strategies

### Enum to Many-to-Many Migration
1. **Staged Approach**
   - First create new tables and relationships
   - Then migrate data from old to new structure
   - Finally remove old fields/tables
   - Keep backward compatibility during transition

2. **Data Validation**
   - Verify all data is migrated correctly
   - Ensure no access is lost during migration
   - Maintain data integrity throughout process

3. **Code Updates**
   - Update service layer first
   - Then update route handlers
   - Finally update frontend integration
   - Test thoroughly at each stage
