---
description: When documenting errors
globs: 
alwaysApply: false
---
# Error Documentation

This document records the major failure points encountered in the FBO LaunchPad project and how they were resolved.

## 1. PostCSS Plugin Loading Failure
**Symptoms:**
- Build-time error in Vite: `Failed to load PostCSS config: Cannot find module '@tailwindcss/postcss'`.

**Cause:**
- Incorrect plugin key in `postcss.config.cjs` (`'@tailwindcss/postcss'` instead of `'tailwindcss'`).

**Resolution:**
1. Updated `postcss.config.cjs` to:
   ```js
   module.exports = {
     plugins: {
       'postcss-nesting': {},
       'tailwindcss': {},
       autoprefixer: {},
     }
   }
   ```
2. Installed missing dependencies:
   ```bash
   npm install -D tailwindcss postcss autoprefixer postcss-nesting
   ```

---

## 2. `process is not defined` in Vite
**Symptoms:**
- Runtime error in console: `ReferenceError: process is not defined` in `useOrders.ts`.

**Cause:**
- Frontend code was accessing `process.env` directly in a Vite project.

**Resolution:**
1. Switched to Vite-specific environment access:
   ```ts
   const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;
   ```
2. Added `src/vite-env.d.ts` for TypeScript definitions:
   ```ts
   /// <reference types="vite/client" />
   interface ImportMetaEnv {
     readonly VITE_API_BASE_URL: string;
   }
   interface ImportMeta { readonly env: ImportMetaEnv }
   ```
3. Created `.env` in the frontend root with:
   ```env
   VITE_API_BASE_URL=http://localhost:5000/api
   ```

---

## 3. Network Error Fetching Orders
**Symptoms:**
- Frontend error: `Error Loading orders: Network Error` when calling `/orders` endpoint.

**Causes & Resolutions:**
- **Backend not running:** Started Flask server:
  ```bash
  cd fbo-launchpad-backend
  flask run --port 5001
  ```
- **Port mismatch:** Updated frontend environment or backend run port to match (e.g., `5001`).
- **Authentication missing:** Ensured login flow stores JWT in `localStorage` under `token` and included in request headers.

---

## 4. Other Common Issues
- **CORS Errors:** If present, configure Flask-CORS in the backend:
  ```py
  from flask_cors import CORS
  app = Flask(__name__)
  CORS(app, resources={r"/api/*": {"origins": "*"}})
  ```
- **Invalid JSON Responses:** Ensure backend API returns valid JSON with `data` field.

---

*Document last updated: YYYY-MM-DD*
